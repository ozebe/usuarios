/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.io.IOException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import control.ConnectionFactory;
import control.Usuario;
import java.text.ParseException;
import java.util.Date;
import static view.UsuariosEditaView.nivelAcesso;
import static view.UsuariosView.atualizaDadosTable;
import static view.UsuariosView.criaTable;
import static view.UsuariosView.db;
import static view.UsuariosView.editarBtn;
import static view.UsuariosView.password;
import static view.UsuariosView.user;

/**
 *
 * @author WesleySantos
 */
public class RedefinirSenhaView extends javax.swing.JFrame {

    private static Connection connection;
    private static ConnectionFactory fabrica = new ConnectionFactory();
    private Usuario usuario;
    private boolean admin;

    /**
     * Creates new form redefinirSenhaView
     *
     * @param usuario
     * @param admin
     */
    public RedefinirSenhaView(Usuario usuario, boolean admin) {
        this.usuario = usuario;
        this.admin = admin;
        initComponents();
        if (admin == true) {
            atualField.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        atualField = new javax.swing.JPasswordField();
        novaField = new javax.swing.JPasswordField();
        nova2Field = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        okBtn = new javax.swing.JButton();
        cancelarBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Redefinir Senha");

        jLabel1.setText("Senha atual:");

        jLabel2.setText("Nova senha:");

        jLabel3.setText("Repetir nova senha:");

        okBtn.setText("OK");
        okBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okBtnActionPerformed(evt);
            }
        });

        cancelarBtn.setText("Cancelar");
        cancelarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(novaField)
                    .addComponent(nova2Field, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                    .addComponent(atualField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(134, Short.MAX_VALUE)
                .addComponent(okBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelarBtn)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(atualField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addComponent(novaField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nova2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okBtn)
                    .addComponent(cancelarBtn))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okBtnActionPerformed
        if (admin == true) {
            try {
                if (verificaCamposSenhaAdmin()) {
                    connection = fabrica.getConnection(db.getDir(), user.getDir(), password.getDir());
                    String sql = "UPDATE usuarios\n"
                            + "SET nome = ?, usuario = ?, data_nasc = ?, nivel = ?, bloqueado = ?, ativo = ?, editado = ?, senha = ?\n"
                            + "WHERE  usuarios.id = ?";
                    PreparedStatement pstmt = connection.prepareStatement(sql);
                    pstmt.setString(1, usuario.getNome());
                    pstmt.setString(2, usuario.getUsuario());

                    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                    Date date = formatter.parse(usuario.getData_nasc());
                    java.sql.Date sDate = convertUtilToSql(date);

                    pstmt.setDate(3, sDate);
                    pstmt.setInt(4, nivelAcesso.getSelectedIndex() + 1);

                    pstmt.setBoolean(5, usuario.isBloqueado());
                    pstmt.setBoolean(6, usuario.isAtivo());

                    // SimpleDateFormat formatador = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
                    java.sql.Timestamp timestamp = new java.sql.Timestamp(new java.util.Date().getTime());

                    pstmt.setTimestamp(7, timestamp);

                    String novaSenha = new String(novaField.getPassword()).trim();
                    pstmt.setString(8, MD5(novaSenha));
                    pstmt.setInt(9, usuario.getId());
                    pstmt.executeUpdate();
                    pstmt.close();
                    connection.close();
                    criaTable();
                    atualizaDadosTable();
                    JOptionPane.showMessageDialog(null, "Usu√°rio " + usuario.getUsuario() + " Atualizado!");
                    editarBtn.setEnabled(true);
                    this.dispose();
                } else {
                }
            } catch (NoSuchAlgorithmException | ClassNotFoundException | SQLException | IOException | ParseException ex) {
                Logger.getLogger(RedefinirSenhaView.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                if (verificaCamposSenha()) {
                    connection = fabrica.getConnection(db.getDir(), user.getDir(), password.getDir());
                    String sql = "UPDATE usuarios\n"
                            + "SET nome = ?, usuario = ?, data_nasc = ?, nivel = ?, bloqueado = ?, ativo = ?, editado = ?, senha = ?\n"
                            + "WHERE  usuarios.id = ?";
                    PreparedStatement pstmt = connection.prepareStatement(sql);
                    pstmt.setString(1, usuario.getNome());
                    pstmt.setString(2, usuario.getUsuario());

                    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                    Date date = formatter.parse(usuario.getData_nasc());
                    java.sql.Date sDate = convertUtilToSql(date);

                    pstmt.setDate(3, sDate);
                    pstmt.setInt(4, nivelAcesso.getSelectedIndex() + 1);

                    pstmt.setBoolean(5, usuario.isBloqueado());
                    pstmt.setBoolean(6, usuario.isAtivo());

                    // SimpleDateFormat formatador = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
                    java.sql.Timestamp timestamp = new java.sql.Timestamp(new java.util.Date().getTime());

                    pstmt.setTimestamp(7, timestamp);

                    String novaSenha = new String(novaField.getPassword()).trim();
                    pstmt.setString(8, MD5(novaSenha));
                    pstmt.setInt(9, usuario.getId());
                    pstmt.executeUpdate();
                    pstmt.close();
                    connection.close();
                    criaTable();
                    atualizaDadosTable();
                    JOptionPane.showMessageDialog(null, "Usu√°rio " + usuario.getUsuario() + " Atualizado!");
                    editarBtn.setEnabled(true);
                    this.dispose();
                } else {
                }
            } catch (NoSuchAlgorithmException | ClassNotFoundException | SQLException | IOException | ParseException ex) {
                Logger.getLogger(RedefinirSenhaView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_okBtnActionPerformed

    private void cancelarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarBtnActionPerformed
        UsuariosView.editarBtn.setEnabled(true);
        this.dispose();
    }//GEN-LAST:event_cancelarBtnActionPerformed

    private static String MD5(String s) throws NoSuchAlgorithmException {
        MessageDigest m = MessageDigest.getInstance("MD5");
        m.update(s.getBytes(), 0, s.length());
        return new BigInteger(1, m.digest()).toString(16);
    }

    private Boolean verificaCamposSenha() throws NoSuchAlgorithmException {
        String atual = new String(atualField.getPassword()).trim();
        String nova1 = new String(novaField.getPassword()).trim();
        String nova2 = new String(nova2Field.getPassword()).trim();
        if ((MD5(atual)).equals(usuario.getSenha())) {
            if (nova1.equals(nova2)) {
                return true;
            } else {
                JOptionPane.showMessageDialog(null, "Nova senha e confirma√ß√£o n√£o s√£o as mesmas!", "Erro", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Senha atual incorreta!", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private Boolean verificaCamposSenhaAdmin() throws NoSuchAlgorithmException {
        String nova1 = new String(novaField.getPassword()).trim();
        String nova2 = new String(nova2Field.getPassword()).trim();

        if (nova1.equals(nova2)) {
            if ((nova1.length() < 6)) {
                JOptionPane.showMessageDialog(null, "A nova senha deve ter no minimo 6 digitos!", "Erro", JOptionPane.ERROR_MESSAGE);
                return false;
            } else {
                return true;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nova senha e confirma√ß√£o n√£o s√£o as mesmas!", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }

    private void salvaEditadoAnteriormente() {
        try {

//            System.out.println(" nome:" + usuario.getNome());
//            System.out.println(" usuario: " + usuario.getUsuario());
//            int nAcesso = nivelAcesso.getSelectedIndex() + 1;
//            System.out.println("id do nivel de acesso: " + nAcesso);
//            System.out.println("status de bloqueio: " + usuario.isBloqueado());
//            System.out.println("status de ativo: " + usuario.isAtivo());
//            System.out.println("nova data de nascimento : " + usuario.getData_nasc());
            connection = fabrica.getConnection(db.getDir(), user.getDir(), password.getDir());
            String sql = "UPDATE usuarios\n"
                    + "SET nome = ?, usuario = ?, data_nasc = ?, nivel = ?, bloqueado = ?, ativo = ?, editado = ?, senha = ?\n"
                    + "WHERE  usuarios.usuario = ?";
            PreparedStatement pstmt = connection.prepareStatement(sql);
            pstmt.setString(1, usuario.getNome());
            pstmt.setString(2, usuario.getUsuario());

            pstmt.setString(3, usuario.getData_nasc());
            pstmt.setInt(4, nivelAcesso.getSelectedIndex() + 1);

            pstmt.setInt(5, boolToInt(usuario.isBloqueado()));
            pstmt.setInt(6, boolToInt(usuario.isAtivo()));

            SimpleDateFormat formatador = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            java.sql.Timestamp timestamp = new java.sql.Timestamp(new java.util.Date().getTime());

            pstmt.setString(7, String.valueOf(formatador.format(timestamp)));

            String novaSenha = new String(novaField.getPassword()).trim();
            pstmt.setString(8, MD5(novaSenha));
            pstmt.setString(9, usuario.getUsuario());
            pstmt.executeUpdate();
            pstmt.close();
            JOptionPane.showMessageDialog(null, "Usu√°rio " + usuario.getUsuario() + " Atualizado!");
            //this.setVisible(false);
            //int id = (int) tableUsuarios.getValueAt(lSelec, 0);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar registro\n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UsuariosEditaView.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("err");
        } catch (IOException ex) {
            Logger.getLogger(UsuariosEditaView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(RedefinirSenhaView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public int boolToInt(boolean b) {
        return b ? 1 : 0;
    }

    private static java.sql.Date convertUtilToSql(java.util.Date uDate) {
        java.sql.Date sDate = new java.sql.Date(uDate.getTime());
        return sDate;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField atualField;
    private javax.swing.JButton cancelarBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField nova2Field;
    private javax.swing.JPasswordField novaField;
    private javax.swing.JButton okBtn;
    // End of variables declaration//GEN-END:variables
}
